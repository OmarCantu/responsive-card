{"version":3,"sources":["static/images/tile.jpg","serviceWorker.js","constants/propTypes.js","components/card/Card.js","constants/colors.js","mockData.js","App.js","index.js","static/images/logo.png"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","IMAGE_PROPTYPE","PropTypes","shape","alt","string","isRequired","src","node","LOGO_PROPTYPE","default","logo","Wrapper","styled","div","_templateObject","props","width","Container","_templateObject2","Tile","img","attrs","role","_templateObject3","Overlay","_templateObject4","Logo","_templateObject5","Title","h2","_templateObject6","Card","className","_props$logo","logoAlt","logoSrc","_props$tile","tile","tileAlt","tileSrc","title","react_default","a","createElement","defaultProps","undefined","CARD_DATA","GlobalStyle","createGlobalStyle","App_templateObject","App","card_Card","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iMCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6GCdOC,EAAiBC,IAAUC,MAAM,CAC5CC,IAAKF,IAAUG,OAAOC,WACtBC,IAAKL,IAAUM,KAAKF,aAKTG,EAAgBR,4sCAC7BQ,EAAcC,QAAU,CACtBN,IAAK,aACLG,IAAKI,KCPP,IAAMC,EAAUC,IAAOC,IAAVC,IAGF,SAAAC,GAAK,OAAIA,EAAMC,QAGpBC,EAAYL,IAAOC,IAAVK,KAKTC,EAAOP,IAAOQ,IAAIC,MAAM,CAC5BC,KAAM,gBADKV,CAAHW,KAYJC,EAAUZ,IAAOC,IAAVY,IC5BU,qBDyCjBC,EAAOd,IAAOQ,IAAIC,MAAM,CAC5BC,KAAM,gBADKV,CAAHe,KAQJC,EAAQhB,IAAOiB,GAAVC,IChDU,sBDmEfC,EAAO,SAAAhB,GAAS,IAElBiB,EAKEjB,EALFiB,UAFkBC,EAOhBlB,EAJFL,KAAawB,EAHKD,EAGV9B,IAAmBgC,EAHTF,EAGI3B,IAHJ8B,EAOhBrB,EAHFsB,KAAaC,EAJKF,EAIVjC,IAAmBoC,EAJTH,EAII9B,IACtBkC,EAEEzB,EAFFyB,MACAxB,EACED,EADFC,MAGF,OACEyB,EAAAC,EAAAC,cAAChC,EAAD,CAASqB,UAAWA,EAAWhB,MAAOA,GACpCyB,EAAAC,EAAAC,cAAC1B,EAAD,KACEwB,EAAAC,EAAAC,cAACxB,EAAD,CACEhB,IAAKmC,EACLhC,IAAKiC,EACLC,MAAOF,IAGRE,GACCC,EAAAC,EAAAC,cAACnB,EAAD,KACEiB,EAAAC,EAAAC,cAACjB,EAAD,CACEvB,IAAK+B,EACL5B,IAAK6B,EACLK,MAAON,IAGTO,EAAAC,EAAAC,cAACf,EAAD,KACGY,OAiBfT,EAAKa,aAAe,CAClBZ,eAAWa,EACXnC,KAAMF,EAAcC,QACpB+B,WAAOK,EACP7B,MAAO,QAGMe,gBEvHFe,EAAY,CACvBT,KAAM,CACJlC,IAAK,gBACLG,WAAKiC,GAEPC,MAAO,gQCCT,IAAMO,EAAcC,YAAHC,KAeTZ,EAAgBS,EAAhBT,KAAMG,EAAUM,EAAVN,MAYCU,MAVf,WACE,OACET,EAAAC,EAAAC,cAAA,QAAMX,UAAU,OACdS,EAAAC,EAAAC,cAACI,EAAD,MAEAN,EAAAC,EAAAC,cAACQ,EAAD,CAAMd,KAAMA,EAAMG,MAAOA,MCvB/BY,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SN0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCOnInBvE,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ef78b395.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tile.25b4e634.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import PropTypes from 'prop-types';\r\n\r\nimport logo from '../static/images/logo.png';\r\n\r\nexport const IMAGE_PROPTYPE = PropTypes.shape({\r\n  alt: PropTypes.string.isRequired,\r\n  src: PropTypes.node.isRequired\r\n})\r\n\r\nexport const TILE_PROPTYPE = IMAGE_PROPTYPE;\r\n\r\nexport const LOGO_PROPTYPE = IMAGE_PROPTYPE;\r\nLOGO_PROPTYPE.default = {\r\n  alt: 'Seven logo',\r\n  src: logo\r\n}\r\n\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport * as colors from '../../constants/colors';\r\nimport { LOGO_PROPTYPE, TILE_PROPTYPE } from '../../constants/propTypes';\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n  max-width: 600px;\r\n  width: ${props => props.width};\r\n`;\r\n\r\nconst Container = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`;\r\n\r\nconst Tile = styled.img.attrs({\r\n  role: 'presentation'\r\n})`\r\n  display: block;\r\n  max-width: 100%;\r\n  transition: transform .5s ease;\r\n\r\n  :hover {\r\n    transform: scale(1.5);\r\n  }\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  align-items: center;\r\n  background-color: ${colors.BLACK50};\r\n  bottom: 0;\r\n  display: grid;\r\n  grid-template-rows: 100%;\r\n  grid-template-columns: 13% 87%;\r\n  height: 31%;\r\n  padding: 2.5%;\r\n  position: absolute;\r\n  width: 100%;\r\n`;\r\n\r\nconst Logo = styled.img.attrs({\r\n  role: 'presentation'\r\n})`\r\n  height: auto;\r\n  max-height: 100%;\r\n  max-width: 100%;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  color: ${colors.WHITE};\r\n  overflow: hidden;\r\n  padding-left: 3.5%;\r\n  white-space: nowrap;\r\n\r\n  @media (max-width: 479.5px) {\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  @media (min-width: 480px) and (max-width: 767.5px) {\r\n    font-size: 1.6rem;\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 2.2rem;\r\n  }\r\n`;\r\n\r\nconst Card = props => {\r\n  const { \r\n    className, \r\n    logo: { alt: logoAlt, src: logoSrc },\r\n    tile: { alt: tileAlt, src: tileSrc }, \r\n    title,\r\n    width\r\n  } = props;\r\n\r\n  return (\r\n    <Wrapper className={className} width={width}>\r\n      <Container>\r\n        <Tile \r\n          alt={tileAlt}\r\n          src={tileSrc} \r\n          title={tileAlt}\r\n        />\r\n\r\n        {title && (\r\n          <Overlay>\r\n            <Logo \r\n              alt={logoAlt} \r\n              src={logoSrc} \r\n              title={logoAlt}\r\n            />\r\n\r\n            <Title>\r\n              {title}\r\n            </Title>\r\n          </Overlay>\r\n        )}\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nCard.propTypes = {\r\n  className: PropTypes.string,\r\n  logo: LOGO_PROPTYPE,\r\n  tile: TILE_PROPTYPE.isRequired,\r\n  title: PropTypes.string,\r\n  width: PropTypes.string,\r\n};\r\n\r\nCard.defaultProps = {\r\n  className: undefined,\r\n  logo: LOGO_PROPTYPE.default,\r\n  title: undefined,\r\n  width: 'auto',\r\n};\r\n\r\nexport default Card;","// Format: HUE_COLOR-NAME. See https://www.color-blindness.com/color-name-hue/ for reference\r\nexport const BLACK = 'rgb(0, 0, 0)'; // #000;\r\nexport const BLACK50 = 'rgba(0, 0, 0, .5)'; // #000;\r\nexport const WHITE = 'rgb(255, 255, 255)'; // #fff;","import tileSrc from './static/images/tile.jpg';\r\n\r\nexport const CARD_DATA = {\r\n  tile: {\r\n    alt: 'Home and Away',\r\n    src: tileSrc\r\n  },\r\n  title: 'Home and Away'\r\n}","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport Card from './components/card/Card';\nimport { CARD_DATA } from './mockData';\n\nimport './App.css';\n\nconst GlobalStyle = createGlobalStyle`\n  html * {\n    box-sizing: border-box;\n    font-family: sans-serif, Arial, Helvetica;\n  }\n\n  h2 {\n    margin: 0;\n  }\n\n  body {\n    padding: 1rem;\n  }\n`\n\nconst { tile, title } = CARD_DATA;\n\nfunction App() {\n  return (\n    <main className=\"app\">\n      <GlobalStyle />\n\n      <Card tile={tile} title={title} />\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.2a3f011a.png\";"],"sourceRoot":""}